import sqlite3


class DbOperation:

    # opens database
    def db_op(self):
        con = sqlite3.connect('password_vault.db')
        return con

    #creates table for new passwords
    def create_student_table(self, name="student_table"):
        con = self.db_op()
        query = f'''
        CREATE TABLE IF NOT EXISTS {name}(
            std_ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            student_id INTEGER NOT NULL,
            std_first_name VARCHAR(200) NOT NULL,
            std_last_name VARCHAR(200) NOT NULL,
            std_email VARCHAR(200) NOT NULL,
            password VARCHAR(50) NOT NULL,
            std_resume TEXT ,
            std_major TEXT NOT NULL,
            std_looking_for_job BIT,
            std_bio TEXT ,
            FOREIGN KEY (std_Applied_job_id) REFERENCES jobs_table(jobs_ID)
            date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            );
        '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query)

    # adds new values to passwords table
    def create_record(self, data, user_id, name="pass_vault"):
        website_name = data['website_name']
        email = data['email']
        username = data['username']
        password = data['password']
        con = self.db_op()
        query = f'''
               INSERT INTO {name}('user_id','website_name', 'email', 'username', 'password') 
               VALUES(?, ?, ?, ?,?);
               '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query, (user_id, website_name, email, username, password))

    #retrieves data from vault based on user ID of account
    def show_record(self, user_id, name="pass_vault"):
        con = self.db_op()
        query = f'''
               SELECT * FROM {name} WHERE user_id=?;
               '''
        with con as con:
            cursor = con.cursor()
            records_list = cursor.execute(query, (user_id,))
            return records_list

    # deletes account from password table based on user ID
    def delete_record(self, ID, name="pass_vault"):
        con = self.db_op()
        query = f'''
               DELETE FROM {name} WHERE ID =?;
               '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query, (ID,))

    # retrieves encrypted password from password vault from account based on user ID
    def get_account_password(self, ID, name="pass_vault"):
        con = self.db_op()
        query = f'''
               SELECT password FROM {name} WHERE ID=? ;
               '''
        with con as con:
            cursor = con.cursor()
            result = cursor.execute(query, (ID,)).fetchone()
            return result[0]

    # creates master table for master accounts, ie. new users
    def create_master_table(self, name="master_table"):
        con = self.db_op()
        query = f'''
        CREATE TABLE IF NOT EXISTS {name}(
            ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            username VARCHAR(200),
            password VARCHAR(50)
            );
        '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query)

    # inputs new account into Master table
    def create_master_record(self, data, name="master_table"):
        username = data['username']
        password = data['password']
        con = self.db_op()
        query = f'''
               INSERT INTO {name}('username', 'password') 
               VALUES(?, ?);
               '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query, (username, password))

    # deletes account from master table based on User ID
    def delete_master_record(self, ID, name="master_table"):
        con = self.db_op()
        query = f'''
               DELETE FROM {name} WHERE ID =?;
               '''
        with con as con:
            cursor = con.cursor()
            cursor.execute(query, (ID,))

    # retrieves master password hash based on username
    def get_stored_password(self, username, name="master_table"):
        con = self.db_op()
        query = f'''
               SELECT password FROM {name} WHERE username=? ;
               '''
        with con as con:
            cursor = con.cursor()
            result = cursor.execute(query, (username,)).fetchone()

            if result is not None:
                return result[0]
            else:
                return None

    # retrieves master password hash based on ID
    def get_master_password(self, ID, name="master_table"):
        con = self.db_op()
        query = f'''
               SELECT password FROM {name} WHERE ID=? ;
               '''
        with con as con:
            cursor = con.cursor()
            result = cursor.execute(query, (ID,)).fetchone()

            return result[0]

    # retrieves user ID based on matching username and password
    def get_user_id(self, username, password, name="master_table"):
        con = self.db_op()
        query = f'''
               SELECT ID FROM {name} WHERE username=? AND password=?;
               '''
        with con as con:
            cursor = con.cursor()
            result = cursor.execute(query, (username, password)).fetchone()
            if result:
                return result[0]
            return None
